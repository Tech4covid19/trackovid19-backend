var serviceWorkerRegistration;
var pushManagerSubscription;

if ('serviceWorker' in navigator) {
  try {
    // Register a Service Worker.
    navigator.serviceWorker.register('service-worker.js');
  }
  catch(e) {
    console.log('Unable to register service worker', e);
  }
  
  navigator.serviceWorker.ready
  .then(function(registration) {
    console.log('navigator.serviceWorker.ready');
    serviceWorkerRegistration = registration;
    // Use the PushManager to get the user's subscription to the push service.
    return registration.pushManager.getSubscription()
    .then(async function(subscription) {
      // If a subscription was found, return it.
      if (subscription) {
        return subscription;
      }
    });
  }).then(function(subscription) {
    if (subscription) {
      register(subscription);
      setPushManagerSubscription(subscription);
    }
  });
}

document.getElementById('subscribeButton').addEventListener('click', function() {
  subscribe(serviceWorkerRegistration)
  .then(function(pushSubscription) {
    if (pushSubscription) {
      register(pushSubscription);
      setPushManagerSubscription(pushSubscription);
    }
  });
});

document.getElementById('sendNotificationButton').addEventListener('click', function() {
  var title = document.getElementById('not_title').value;
  var options = {
    body: document.getElementById('not_body').value,
    icon: document.getElementById('not_icon').value,
    badge: document.getElementById('not_badge').value,
    image: document.getElementById('not_image').value,
  };
  serviceWorkerRegistration.showNotification(title, options)
});

function setPushManagerSubscription(pushSubscription) {
  pushManagerSubscription = pushSubscription;
  document.getElementById('subscribe').innerText = 'Has subscription!';
}

// document.getElementById('doIt').onclick = function() {
//   alert('a');
//   // const delay = document.getElementById('notification-delay').value;
//   // const ttl = document.getElementById('notification-ttl').value;

//   // Ask the server to send the client a notification (for testing purposes, in actual
//   // applications the push notification is likely going to be generated by some event
//   // in the server).
//   // fetch('./sendNotification', {
//   //   method: 'post',
//   //   headers: {
//   //     'Content-type': 'application/json'
//   //   },
//   //   body: JSON.stringify({
//   //     subscription: subscription,
//   //     delay: delay,
//   //     ttl: ttl,
//   //   }),
//   // });
// };

async function subscribe(registration) {
  return new Promise(function(resolve, reject) {
    if (!registration) {
      console.log('No service worker registration, unable to subscribe to web push');
      reject(new Error('No service worker registration, unable to subscribe to web push'));
    }

    var token = document.getElementById('oauth').value;
    // Get the server's public key
    fetch('/api/v1/push/web/vapidPublicKey', {
      headers: {
        'Authorization': 'Bearer ' + token
      }
    })
    .then((response) => {
      return response.json();
    })
    .then((data) => {
      const vapidPublicKey = data.publicKey;
      // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
      const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);
  
      // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
      // send notifications that don't have a visible effect for the user).
      resolve(registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: convertedVapidKey
      }));
  
    });

  });
}

function register(subscription) {
  var token = document.getElementById('oauth').value;
  fetch('/api/v1/push/web/register', {
    method: 'post',
    headers: {
      'Content-type': 'application/json',
      'Authorization': 'Bearer ' + token
    },
    body: JSON.stringify({
      subscription: subscription
    }),
  })
  .then(function(o) {
    //alert(o.statusText);
  });
}

function urlBase64ToUint8Array(base64String) {
  var padding = '='.repeat((4 - base64String.length % 4) % 4);
  var base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');
 
  var rawData = window.atob(base64);
  var outputArray = new Uint8Array(rawData.length);
 
  for (var i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}